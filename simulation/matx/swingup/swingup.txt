Real M, m, J, g, l, f, a;
Real r, th,dr, dth, ddr, ddth;
Real E0, E, r_max, th_min;
Matrix F;

E0 = 0;
r_max = 0.08;
th_min = 15.0;

M = Pendulum.M;
m = Pendulum.m;
J = Pendulum.J;
l = Pendulum.l;
f = Pendulum.f;
a = Pendulum.a;
g = Pendulum.g;
F = mStateFeedback.F;

r = xx(1,1);
th = xx(2,1);
dr = xx(3,1);
dth = xx(4,1);

if (isSolverTrial() == 0 && abs(th) <= th_min*PI/180 && abs(r) < r_max){
	swinging = 0;
}
if (isSolverTrial() == 0 && abs(th) > th_min*PI/180){
	swinging = 1;
} 


if(swinging == 1){
	E = (J + m*l*l)*dth*dth/2 + m*g*l*(cos(th) - 1);
	ddr = max(-n*g, min(n*g, kk*(E-E0)*sgn(dth*cos(th))));
	
	if(isSolverTrial() == 0){
	pre_ddth = ddth = (dth - pre_dth)/samplingInterval;
	pre_dth = dth;
	} else {
		ddth = pre_ddth;
	}

	u = [((M+m)*ddr + m*l*(ddth*cos(th)-dth*dth*sin(th)) + f*dr)/a];

	if(abs(r) > r_max && r*u(1,1)>0){
		u = [0];
	}
} else {
	u = -F*xx(5:8,1);
}